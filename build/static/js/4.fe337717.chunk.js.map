{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/errorMessage.js","services/MarvelServices.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","header","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","View","imageStyle","_jsxs","className","children","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","timerid","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","imgStyle","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","_Fragment","CharInfo","charId","skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","console","log","this","setState","Component","CharSearchForm","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/4.fe337717.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error' />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage","import {useHttp} from '../hooks/http.hook'\r\nconst useMarvelService = () => {\r\n\tconst {loading, request, error, clearError} = useHttp()\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=5932e129f28e5003291db64051b3cfaf'\r\n\tconst _baseOffset = 210\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t};\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: \"There is no description for this character\",\r\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items,\r\n\t\t};\r\n\t};\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tclearError,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t};\r\n};\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, header = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetLoading(true)\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, header})\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Couldn't fetch ${url}, status: ${response.status}`)\r\n\t\t\t}\t\r\n\r\n\t\t\tconst data = await response.json()\r\n\t\t\t\r\n\t\t\tsetLoading(false)\r\n\t\t\treturn data\r\n\r\n\t\t} catch(e) {\r\n\t\t\tsetLoading(false)\r\n\t\t\tsetError(e.message)\r\n\t\t\tthrow e\r\n\t\t}\r\n\r\n\t}, [])\r\n\r\n\tconst clearError = useCallback(() => setError(null), [])\r\n\r\n\treturn {loading, request, error, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useEffect, useState } from 'react'\nimport useMarvelService from '../../services/MarvelServices';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nimport './randomChar.scss';\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState({})\n    const {loading, error, getCharacter, clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n        const timerid = setInterval(updateChar,60000)\n\n        return () => {\n            clearInterval(timerid)\n        }\n    },[])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n            const errorMessage = error ? <ErrorMessage/> : null\n            const spinner = loading ? <Spinner/> : null\n            const content = !(loading || error) ? <View char={char}/> : null\n\n            return (\n                <div className=\"randomchar\">\n                    {errorMessage}\n                    {spinner}\n                    {content}\n                    <div className=\"randomchar__static\">\n                        <p className=\"randomchar__title\">\n                            Random character for today!<br/>\n                            Do you want to get to know him better?\n                        </p>\n                        <p className=\"randomchar__title\">\n                            Or choose another one\n                        </p>\n                        <button onClick={updateChar} className=\"button button__main\">\n                            <div className=\"inner\">try it</div>\n                        </button>\n                        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                    </div>\n                </div>\n            )\n        }\n\n    const View = ({char}) => {\n        const {name, thumbnail, description, wiki, homepage} = char\n        let imageStyle = {objectFit: 'cover'}\n        if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imageStyle = {objectFit: 'contain'}\n        }\n\n        return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imageStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">HOMEPAGE</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">WIKI</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        )\n    }\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport useMarvelService from '../../services/MarvelServices';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\nimport useMarvelService from '../../services/MarvelServices';\n\nconst CharInfo = (props) => {\n    const {charId} = props\n   const [char, setChar] = useState(null)\n\n\n    const {loading, error, clearError, getCharacter} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n    },[charId])\n\n\n\n    const updateChar = () => {\n        clearError()\n        if (!charId) {\n            return\n        }\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n\n\n        const skeleton = char || loading || error ? null : <Skeleton/> \n        const errorMessage = error ? <ErrorMessage/> : null\n        const spinner = loading ? <Spinner/> : null\n        const content = !(loading || error || !char) ? <View char={char}/> : null\n \n        return (\n            <div className=\"char__info\">\n               {skeleton}\n               {errorMessage}\n               {spinner}\n               {content}\n            </div>\n        )\n    }\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char\n    let imgStyle = {objectFit: 'cover'}\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" || thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\n        imgStyle = {objectFit: 'contain'}\n    }\n   return (\n    <>\n         <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length === 0 ? 'No comics found broo' : null}\n                    {\n                        comics.map((item, i) => {\n                            return (\n                    <li key={i} className=\"char__comics-item\">\n                        {item.name}\n                    </li>\n                            )\n                        })\n                    }\n                    \n                    \n                </ul>\n    </>\n   ) \n}\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/errorMessage\";\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo)\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\treturn <ErrorMessage/>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    \r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                    <ErrorBoundary>\r\n                        <CharList onCharSelected={onCharSelected} />\r\n                    </ErrorBoundary>\r\n                    <div>\r\n                        <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                        </ErrorBoundary>\r\n                        <ErrorBoundary>\r\n                            <CharSearchForm />\r\n                        </ErrorBoundary>\r\n                    </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage"],"sourceRoot":""}